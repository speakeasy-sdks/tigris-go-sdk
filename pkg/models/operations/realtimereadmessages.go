// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/tigris-go-sdk/pkg/models/shared"
	"net/http"
)

type RealtimeReadMessagesRequest struct {
	Channel   string  `pathParam:"style=simple,explode=false,name=channel"`
	End       *string `queryParam:"style=form,explode=true,name=end"`
	Event     *string `queryParam:"style=form,explode=true,name=event"`
	Limit     *int64  `queryParam:"style=form,explode=true,name=limit"`
	Project   string  `pathParam:"style=simple,explode=false,name=project"`
	SessionID *string `queryParam:"style=form,explode=true,name=session_id"`
	SocketID  *string `queryParam:"style=form,explode=true,name=socket_id"`
	Start     *string `queryParam:"style=form,explode=true,name=start"`
}

func (o *RealtimeReadMessagesRequest) GetChannel() string {
	if o == nil {
		return ""
	}
	return o.Channel
}

func (o *RealtimeReadMessagesRequest) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *RealtimeReadMessagesRequest) GetEvent() *string {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *RealtimeReadMessagesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *RealtimeReadMessagesRequest) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *RealtimeReadMessagesRequest) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *RealtimeReadMessagesRequest) GetSocketID() *string {
	if o == nil {
		return nil
	}
	return o.SocketID
}

func (o *RealtimeReadMessagesRequest) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

type RealtimeReadMessagesResponse struct {
	ContentType string
	// OK
	ReadMessagesResponse *shared.ReadMessagesResponse
	// Default error response
	Status      *shared.Status
	StatusCode  int
	RawResponse *http.Response
}

func (o *RealtimeReadMessagesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RealtimeReadMessagesResponse) GetReadMessagesResponse() *shared.ReadMessagesResponse {
	if o == nil {
		return nil
	}
	return o.ReadMessagesResponse
}

func (o *RealtimeReadMessagesResponse) GetStatus() *shared.Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *RealtimeReadMessagesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RealtimeReadMessagesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
