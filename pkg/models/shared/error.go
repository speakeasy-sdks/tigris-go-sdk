// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ErrorCodeEnum - The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
type ErrorCodeEnum string

const (
	ErrorCodeEnumOk                 ErrorCodeEnum = "OK"
	ErrorCodeEnumCancelled          ErrorCodeEnum = "CANCELLED"
	ErrorCodeEnumUnknown            ErrorCodeEnum = "UNKNOWN"
	ErrorCodeEnumInvalidArgument    ErrorCodeEnum = "INVALID_ARGUMENT"
	ErrorCodeEnumDeadlineExceeded   ErrorCodeEnum = "DEADLINE_EXCEEDED"
	ErrorCodeEnumNotFound           ErrorCodeEnum = "NOT_FOUND"
	ErrorCodeEnumAlreadyExists      ErrorCodeEnum = "ALREADY_EXISTS"
	ErrorCodeEnumPermissionDenied   ErrorCodeEnum = "PERMISSION_DENIED"
	ErrorCodeEnumResourceExhausted  ErrorCodeEnum = "RESOURCE_EXHAUSTED"
	ErrorCodeEnumFailedPrecondition ErrorCodeEnum = "FAILED_PRECONDITION"
	ErrorCodeEnumAborted            ErrorCodeEnum = "ABORTED"
	ErrorCodeEnumOutOfRange         ErrorCodeEnum = "OUT_OF_RANGE"
	ErrorCodeEnumUnimplemented      ErrorCodeEnum = "UNIMPLEMENTED"
	ErrorCodeEnumInternal           ErrorCodeEnum = "INTERNAL"
	ErrorCodeEnumUnavailable        ErrorCodeEnum = "UNAVAILABLE"
	ErrorCodeEnumDataLoss           ErrorCodeEnum = "DATA_LOSS"
	ErrorCodeEnumUnauthenticated    ErrorCodeEnum = "UNAUTHENTICATED"
	ErrorCodeEnumConflict           ErrorCodeEnum = "CONFLICT"
	ErrorCodeEnumBadGateway         ErrorCodeEnum = "BAD_GATEWAY"
	ErrorCodeEnumMethodNotAllowed   ErrorCodeEnum = "METHOD_NOT_ALLOWED"
)

func (e ErrorCodeEnum) ToPointer() *ErrorCodeEnum {
	return &e
}

func (e *ErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OK":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "UNKNOWN":
		fallthrough
	case "INVALID_ARGUMENT":
		fallthrough
	case "DEADLINE_EXCEEDED":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "ALREADY_EXISTS":
		fallthrough
	case "PERMISSION_DENIED":
		fallthrough
	case "RESOURCE_EXHAUSTED":
		fallthrough
	case "FAILED_PRECONDITION":
		fallthrough
	case "ABORTED":
		fallthrough
	case "OUT_OF_RANGE":
		fallthrough
	case "UNIMPLEMENTED":
		fallthrough
	case "INTERNAL":
		fallthrough
	case "UNAVAILABLE":
		fallthrough
	case "DATA_LOSS":
		fallthrough
	case "UNAUTHENTICATED":
		fallthrough
	case "CONFLICT":
		fallthrough
	case "BAD_GATEWAY":
		fallthrough
	case "METHOD_NOT_ALLOWED":
		*e = ErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorCodeEnum: %s", s)
	}
}

// Error - The Error type defines a logical error model
type Error struct {
	// The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
	Code *ErrorCodeEnum `json:"code,omitempty"`
	// A developer-facing descriptive error message
	Message *string `json:"message,omitempty"`
}
