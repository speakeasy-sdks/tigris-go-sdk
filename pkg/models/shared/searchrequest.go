// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SearchRequestFacet - Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
type SearchRequestFacet struct {
}

type SearchRequestFields struct {
}

// SearchRequestFilter - Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
type SearchRequestFilter struct {
}

// SearchRequestSort - Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
type SearchRequestSort struct {
}

type SearchRequest struct {
	// Optionally specify a database branch name to perform operation on
	Branch *string `json:"branch,omitempty"`
	// A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
	Collation *Collation `json:"collation,omitempty"`
	// Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
	ExcludeFields []string `json:"exclude_fields,omitempty"`
	// Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
	Facet  *SearchRequestFacet  `json:"facet,omitempty"`
	Fields *SearchRequestFields `json:"fields,omitempty"`
	// Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
	Filter *SearchRequestFilter `json:"filter,omitempty"`
	// Array of document field names to include in results. By default, all fields are included.
	IncludeFields []string `json:"include_fields,omitempty"`
	// Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
	Page *int `json:"page,omitempty"`
	// Optionally can set the number of hits to be returned per page, default is 20.
	PageSize *int `json:"page_size,omitempty"`
	// Query string for searching across text fields
	Q *string `json:"q,omitempty"`
	// Array of fields to project search query against
	SearchFields []string `json:"search_fields,omitempty"`
	// Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
	Sort *SearchRequestSort `json:"sort,omitempty"`
}
